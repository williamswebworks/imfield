<?php
// $Id$

/**
 * Implements hook_field_info().
 */
function imfield_field_info() {
  return array(
    'imfield_icq' => array(
      'label' => t('ICQ Field'),
      'description' => t('This field stores an ICQ number'),
      'default_widget' => 'imfield_textfield',
      'default_formatter' => 'imfield_onlinestatus',
    ),
    'imfield_skype' => array(
      'label' => t('Skype Field'),
      'description' => t('This field stores a Skype account name'),
      'default_widget' => 'imfield_textfield',
      'default_formatter' => 'imfield_onlinestatus',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function imfield_field_is_empty($item, $field) {
  return empty($item['value']) && $item['value'] !== '0';
}

/**
 * Implements hook_field_formatter_info().
 */
function imfield_field_formatter_info() {
  return array(
    'imfield_onlinestatus' => array(
      'label' => t('Onlinestatus'),
      'field types' => array('imfield_icq', 'imfield_skype'),
    ),
    'imfield_unformatted' => array(
      'label' => t('Unformatted'),
      'field types' => array('imfield_icq', 'imfield_skype'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * TODO:
 * Make themable
 */
function imfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  foreach ($items as $delta => $item) {
    $output = check_plain($item['value']);
    
    if($display['type'] == 'imfield_onlinestatus') {
      switch($field['type']) {
        case 'imfield_icq':
          $output = "<img src=\"http://status.icq.com/online.gif?icq={$output}&img=5\" />" . $output;
          break;
        
        case 'imfield_skype':
          $output = "<img src=\"http://mystatus.skype.com/smallicon/{$output}\" />" . $output;
          break;
      }
    }
    
    $element[$delta] = array('#markup' => $output);
  }
  
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function imfield_field_widget_info() {
  return array(
    'imfield_textfield' => array(
      'label' => t('Textfield'),
      'field types' => array('imfield_icq', 'imfield_skype'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function imfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  
  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
  );
  
  $element['#element_validate'][] = 'imfield_field_widget_validate';
  
  return array('value' => $element);
}

/**
 * Implements hook_field_validate().
 * imfield_field_widget_validate() does the real job.
 */
function imfield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
}

/**
 * FAPI validation of an individual icq element.
 *
 * TODO: Find regex for Skype account names
 */
function imfield_field_widget_validate($element, &$form_state) {
  // Trim value
  $value = trim($element['#value']);
  form_set_value($element, $value, $form_state);
  
  // Prepare validation
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);
  $error = false;
  
  // Validate
  switch($field['type']) {
    case 'imfield_icq':
      // ICQ:
      // 5 to 10 numbers, ignore spaces and dashes.
      // Based on experiments with ICQ Apis.
      // -- It would be better, if there was an official reference. XXX
      if(!preg_match('/^[0-9]{5,10}$/', $value)) {
        $error = 'The ICQ number is not valid.';
      }
      break;
    
    case 'imfield_skype':
      // Skype:
      // Your Skype Name is your unique username for Skype.
      // It must be between 6-32 characters, start with a letter and contain
      // only letters and numbers (no spaces or special characters).
      // -- from Skype registration form
      if(!preg_match('/^[A-Za-z][A-Za-z0-9]{5,31}$/', $value)) {
        $error = 'The Skype account name is not valid.';
      }
      break;
  }
  
  // Display error
  if($error) {
    form_error($element, $error);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function imfield_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
